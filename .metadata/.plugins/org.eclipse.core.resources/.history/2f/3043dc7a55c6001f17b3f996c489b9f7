package edu.kh.todo.common.config;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;


/*
 * @Configuration
 * - 설정용 클래스임을 명시함 (스프링이 해당 클래스를 설정 정보로 인식하고 사용)
 * + 객체로 생성해서 내부 코드를 서버 실행시 모두 바로 실행
 * 
 * 
 * 
 * @PropertySource("경로")
 * - 지정된 경로의 properties 파일 내용을 읽어와 사용
 * - 사용할 properties 파일이 다수일 경우
 * 	 해당 어노테이션 연속 해서 작성 가능
 * 	
 * - "classpath:/	는 src/main/resources 경로를 의미
 * 
 * 
 * 
 * @Autowired
 * - 등록된 Bean 중에서
 * 	 타입이 일치하거나, 상속 관계에 있는 Bean을
 *   지정된 필드에 주입
 *   == 의존성 주입(DI)
 * 
 *  @ConfigurationProperties(prefix = "spring.datasource.hikari")
 *  - @PropertySource 로 읽어온 config.properties 파일의 내용중
 *    접두사 (앞부분, prefix)가 일치하는 값만 읽어옴
 *  prefix : 접두사
 *  
 *  
 *  @Bean 
 *  - 개발자가 수동으로 생성한 객체의 관리를
 *    스프링에게 넘기는 어노테이션(Bean 등록)
 *  
 *  
 * */


// DBConfig는 설정용 클래스에 해당함 
@Configuration
@PropertySource("classpath:/config.properties")
public class DBConfig {

	// 필드
	@Autowired // 의존성 주입인 DI와 관련되어 있음 (DI, 의존성 주입)
	private ApplicationContext applicationContext; // aplication scope 객체 : 즉, 현재 프로젝트
	// -> 스프링이 관리하고 있는 AppilcationContext 객체를 의존성 주입 받는다
	// -> 현재 프로젝트의 전반적인 설정과 Bean 관리에 접근할 수 있도록 해줌.

	// 메서드
	
	//////////////// HikariCP ////////////////
	
	@Bean
	@ConfigurationProperties(prefix = "spring.datasource.hikari")
	public HikariConfig hikariConfig() {
		
		// -> config.properties 파일에서 읽어온
		// spring.datasource.hikari로 시작한는 모든 값이
		// 자동으로 알맞은 필드에 세팅됨
		
		return new HikariConfig();
	}
	
	
	@Bean
	public DataSource dataSource(HikariConfig config) {
		// 매개변수 HikariConfig config
		// -> 등록된 Bean 중 HikariConfig 타입의 Bean을 자동으로 주입
		// -> HikariConfig를 통해 DataSource 객체를 생성
		DataSource dataSource = new HikariDataSource(config);
		
		// DataSource
		// 애플리케이션이 데이터베이스에 연결할 때 사용하는 설정.
		// 1) DB 연결 정보 제공 (URL. username, password)
		// 2) Connection pool 관리
		// 3) 트랜잭션 관리
		return dataSource;
	}
	
	
	//////////////// Mybatis 설정 ////////////////
	// Mybatis : Java 애플리케이션에서 SQL을 더 쉽게 사용할 수 있도록 도와주는 영속성 프레임워크.
	// 영속성 프레임워크(Persistence Framework)는 애플리케이션의 데이터를 
	// 데이터베이스와 같은 저장소에 영구적으로 저장하고,
	// 이를 쉽게 조회, 수정, 삭제 등 할 수 있도록 도와주는 프레임워크.
	
	// SqlSessionFactory : SqlSession을 만드는 객체
	@Bean
	public SqlSessionFactory sessionFactory(DataSource dataSource) throws Exception{
	SqlSessionFactoryBean sessionFactoryBean = new SqlSessionFactoryBean();
	sessionFactoryBean.setDataSource(dataSource);
	// 매퍼 파일이 모여있는 경로 지정
	sessionFactoryBean.setMapperLocations(applicationContext.getResources(""));

	

	// 별칭을 지정해야하는 DTO가 모여있는 패키지 지정
	// -> 해당 패키지에 있는 모든 클래스가 클래스명으로 별칭이 지정됨
	sessionFactoryBean.setTypeAliasesPackage("edu.kh.project.member.model.dto");
	// 마이바티스 설정 파일 경로 지정
	sessionFactoryBean.setConfigLocation(applicationContext.getResource(""));
	// SqlSession 객체 반환
	return sessionFactoryBean.getObject();
	}

	// SqlSessionTemplate : 기본 SQL 실행 + 트랜잭션 처리
	@Bean
	public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sessionFactory) {
	return new SqlSessionTemplate(sessionFactory);
	}
	// DataSourceTransactionManager : 트랜잭션 매니저
	@Bean
	public DataSourceTransactionManager dataSourceTransactionManager(DataSource dataSource) {
	return new DataSourceTransactionManager(dataSource);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}







