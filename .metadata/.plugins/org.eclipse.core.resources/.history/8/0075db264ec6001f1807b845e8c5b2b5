package edu.kh.todo.common.config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;


/*
 * @Configuration
 * - 설정용 클래스임을 명시함 (스프링이 해당 클래스를 설정 정보로 인식하고 사용)
 * + 객체로 생성해서 내부 코드를 서버 실행시 모두 바로 실행
 * 
 * 
 * 
 * @PropertySource("경로")
 * - 지정된 경로의 properties 파일 내용을 읽어와 사용
 * - 사용할 properties 파일이 다수일 경우
 * 	 해당 어노테이션 연속 해서 작성 가능
 * 	
 * - "classpath:/	는 src/main/resources 경로를 의미
 * 
 * 
 * 
 * @Autowired
 * - 등록된 Bean 중에서
 * 	 타입이 일치하거나, 상속 관계에 있는 Bean을
 *   지정된 필드에 주입
 *   == 의존성 주입(DI)
 * 
 *  @ConfigurationProperties(prefix = "spring.datasource.hikari")
 *  - @PropertySource 로 읽어온 config.properties 파일의 내용중
 *    접두사 (앞부분, prefix)가 일치하는 값만 읽어옴
 *  prefix : 접두사
 *  
 *  
 *  @Bean 
 *  - 개발자가 수동으로 생성한 객체의 관리를
 *    스프링에게 넘기는 어노테이션(Bean 등록)
 *  
 *  
 * */


// DBConfig는 설정용 클래스에 해당함 
@Configuration
@PropertySource("classpath:/config.properties")
public class DBConfig {

	// 필드
	@Autowired // 의존성 주입인 DI와 관련되어 있음 (DI, 의존성 주입)
	private ApplicationContext applicationContext; // aplication scope 객체 : 즉, 현재 프로젝트
	// -> 스프링이 관리하고 있는 AppilcationContext 객체를 의존성 주입 받는다
	// -> 현재 프로젝트의 전반적인 설정과 Bean 관리에 접근할 수 있도록 해줌.

	// 메서드
	
	//////////////// HikariCP ////////////////
	
	@Bean
	@ConfigurationProperties(prefix = "spring.datasource.hikari")
	public HikariConfig hikariConfig() {
		
		// -> config.properties 파일에서 읽어온
		// spring.datasource.hikari로 시작한는 모든 값이
		// 자동으로 알맞은 필드에 세팅됨
		
		return new HikariConfig();
	}
	
	
	@Bean
	public DataSource dataSource(HikariConfig config) {
	DataSource dataSource = new HikariDataSource(config);
	return dataSource;
	}
	
}







